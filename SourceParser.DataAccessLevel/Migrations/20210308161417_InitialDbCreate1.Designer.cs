// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SourceParser.DataAccessLevel;

namespace SourceParser.DataAccessLevel.Migrations
{
    [DbContext(typeof(ApplicationContext))]
    [Migration("20210308161417_InitialDbCreate1")]
    partial class InitialDbCreate1
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.10");

            modelBuilder.Entity("SourceParser.DataAccessLevel.Entities.Author", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Patronymic")
                        .HasColumnType("TEXT");

                    b.Property<string>("Surname")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Authors");
                });

            modelBuilder.Entity("SourceParser.DataAccessLevel.Entities.Co_Author", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Co_Authors");
                });

            modelBuilder.Entity("SourceParser.DataAccessLevel.Entities.Document", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("AdditionalInf")
                        .HasColumnType("TEXT");

                    b.Property<string>("AuthorId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Co_AuthorId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Date")
                        .HasColumnType("TEXT");

                    b.Property<string>("Edition")
                        .HasColumnType("TEXT");

                    b.Property<string>("EditorId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Language")
                        .HasColumnType("TEXT");

                    b.Property<string>("PageId")
                        .HasColumnType("TEXT");

                    b.Property<string>("PublisherId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Title")
                        .HasColumnType("TEXT");

                    b.Property<string>("TitleOfConference")
                        .HasColumnType("TEXT");

                    b.Property<string>("TranslatorId")
                        .HasColumnType("TEXT");

                    b.Property<int>("Type")
                        .HasColumnType("INTEGER");

                    b.Property<string>("URLAdress")
                        .HasColumnType("TEXT");

                    b.Property<string>("Volume")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.HasIndex("Co_AuthorId");

                    b.HasIndex("EditorId");

                    b.HasIndex("PageId");

                    b.HasIndex("PublisherId");

                    b.HasIndex("TranslatorId");

                    b.ToTable("Documents");
                });

            modelBuilder.Entity("SourceParser.DataAccessLevel.Entities.Editor", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Editors");
                });

            modelBuilder.Entity("SourceParser.DataAccessLevel.Entities.ImportLinkData", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("BiblLinkClass")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("SKU")
                        .HasColumnType("TEXT");

                    b.Property<string>("SearchParameter0")
                        .HasColumnType("TEXT");

                    b.Property<string>("SearchParameter1")
                        .HasColumnType("TEXT");

                    b.Property<string>("SearchParameter10")
                        .HasColumnType("TEXT");

                    b.Property<string>("SearchParameter11")
                        .HasColumnType("TEXT");

                    b.Property<string>("SearchParameter12")
                        .HasColumnType("TEXT");

                    b.Property<string>("SearchParameter13")
                        .HasColumnType("TEXT");

                    b.Property<string>("SearchParameter14")
                        .HasColumnType("TEXT");

                    b.Property<string>("SearchParameter15")
                        .HasColumnType("TEXT");

                    b.Property<string>("SearchParameter16")
                        .HasColumnType("TEXT");

                    b.Property<string>("SearchParameter17")
                        .HasColumnType("TEXT");

                    b.Property<string>("SearchParameter18")
                        .HasColumnType("TEXT");

                    b.Property<string>("SearchParameter19")
                        .HasColumnType("TEXT");

                    b.Property<string>("SearchParameter2")
                        .HasColumnType("TEXT");

                    b.Property<string>("SearchParameter20")
                        .HasColumnType("TEXT");

                    b.Property<string>("SearchParameter21")
                        .HasColumnType("TEXT");

                    b.Property<string>("SearchParameter22")
                        .HasColumnType("TEXT");

                    b.Property<string>("SearchParameter23")
                        .HasColumnType("TEXT");

                    b.Property<string>("SearchParameter24")
                        .HasColumnType("TEXT");

                    b.Property<string>("SearchParameter25")
                        .HasColumnType("TEXT");

                    b.Property<string>("SearchParameter26")
                        .HasColumnType("TEXT");

                    b.Property<string>("SearchParameter27")
                        .HasColumnType("TEXT");

                    b.Property<string>("SearchParameter28")
                        .HasColumnType("TEXT");

                    b.Property<string>("SearchParameter29")
                        .HasColumnType("TEXT");

                    b.Property<string>("SearchParameter3")
                        .HasColumnType("TEXT");

                    b.Property<string>("SearchParameter30")
                        .HasColumnType("TEXT");

                    b.Property<string>("SearchParameter31")
                        .HasColumnType("TEXT");

                    b.Property<string>("SearchParameter32")
                        .HasColumnType("TEXT");

                    b.Property<string>("SearchParameter33")
                        .HasColumnType("TEXT");

                    b.Property<string>("SearchParameter34")
                        .HasColumnType("TEXT");

                    b.Property<string>("SearchParameter35")
                        .HasColumnType("TEXT");

                    b.Property<string>("SearchParameter36")
                        .HasColumnType("TEXT");

                    b.Property<string>("SearchParameter37")
                        .HasColumnType("TEXT");

                    b.Property<string>("SearchParameter38")
                        .HasColumnType("TEXT");

                    b.Property<string>("SearchParameter39")
                        .HasColumnType("TEXT");

                    b.Property<string>("SearchParameter4")
                        .HasColumnType("TEXT");

                    b.Property<string>("SearchParameter40")
                        .HasColumnType("TEXT");

                    b.Property<string>("SearchParameter41")
                        .HasColumnType("TEXT");

                    b.Property<string>("SearchParameter42")
                        .HasColumnType("TEXT");

                    b.Property<string>("SearchParameter43")
                        .HasColumnType("TEXT");

                    b.Property<string>("SearchParameter44")
                        .HasColumnType("TEXT");

                    b.Property<string>("SearchParameter45")
                        .HasColumnType("TEXT");

                    b.Property<string>("SearchParameter46")
                        .HasColumnType("TEXT");

                    b.Property<string>("SearchParameter47")
                        .HasColumnType("TEXT");

                    b.Property<string>("SearchParameter48")
                        .HasColumnType("TEXT");

                    b.Property<string>("SearchParameter49")
                        .HasColumnType("TEXT");

                    b.Property<string>("SearchParameter5")
                        .HasColumnType("TEXT");

                    b.Property<string>("SearchParameter50")
                        .HasColumnType("TEXT");

                    b.Property<string>("SearchParameter51")
                        .HasColumnType("TEXT");

                    b.Property<string>("SearchParameter52")
                        .HasColumnType("TEXT");

                    b.Property<string>("SearchParameter53")
                        .HasColumnType("TEXT");

                    b.Property<string>("SearchParameter54")
                        .HasColumnType("TEXT");

                    b.Property<string>("SearchParameter55")
                        .HasColumnType("TEXT");

                    b.Property<string>("SearchParameter56")
                        .HasColumnType("TEXT");

                    b.Property<string>("SearchParameter57")
                        .HasColumnType("TEXT");

                    b.Property<string>("SearchParameter58")
                        .HasColumnType("TEXT");

                    b.Property<string>("SearchParameter59")
                        .HasColumnType("TEXT");

                    b.Property<string>("SearchParameter6")
                        .HasColumnType("TEXT");

                    b.Property<string>("SearchParameter60")
                        .HasColumnType("TEXT");

                    b.Property<string>("SearchParameter61")
                        .HasColumnType("TEXT");

                    b.Property<string>("SearchParameter62")
                        .HasColumnType("TEXT");

                    b.Property<string>("SearchParameter63")
                        .HasColumnType("TEXT");

                    b.Property<string>("SearchParameter64")
                        .HasColumnType("TEXT");

                    b.Property<string>("SearchParameter65")
                        .HasColumnType("TEXT");

                    b.Property<string>("SearchParameter66")
                        .HasColumnType("TEXT");

                    b.Property<string>("SearchParameter67")
                        .HasColumnType("TEXT");

                    b.Property<string>("SearchParameter68")
                        .HasColumnType("TEXT");

                    b.Property<string>("SearchParameter69")
                        .HasColumnType("TEXT");

                    b.Property<string>("SearchParameter7")
                        .HasColumnType("TEXT");

                    b.Property<string>("SearchParameter8")
                        .HasColumnType("TEXT");

                    b.Property<string>("SearchParameter9")
                        .HasColumnType("TEXT");

                    b.Property<string>("SourceLink")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("ImportLinksData");
                });

            modelBuilder.Entity("SourceParser.DataAccessLevel.Entities.Note", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("DocumentId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("DocumentId");

                    b.ToTable("Notes");
                });

            modelBuilder.Entity("SourceParser.DataAccessLevel.Entities.Page", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("CountOfPages")
                        .HasColumnType("TEXT");

                    b.Property<string>("PageFirst")
                        .HasColumnType("TEXT");

                    b.Property<string>("PageLast")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Page");
                });

            modelBuilder.Entity("SourceParser.DataAccessLevel.Entities.Publisher", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("Address")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Publishers");
                });

            modelBuilder.Entity("SourceParser.DataAccessLevel.Entities.Reference", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("DocumentId")
                        .HasColumnType("TEXT");

                    b.Property<string>("StyleId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("DocumentId");

                    b.HasIndex("StyleId");

                    b.ToTable("References");
                });

            modelBuilder.Entity("SourceParser.DataAccessLevel.Entities.Style.AuthorFirst", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("LabelId")
                        .HasColumnType("TEXT");

                    b.Property<string>("NameId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("LabelId");

                    b.HasIndex("NameId");

                    b.ToTable("AuthorFirst");
                });

            modelBuilder.Entity("SourceParser.DataAccessLevel.Entities.Style.AuthorSecond", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("LabelId")
                        .HasColumnType("TEXT");

                    b.Property<string>("NameId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("LabelId");

                    b.HasIndex("NameId");

                    b.ToTable("AuthorSecond");
                });

            modelBuilder.Entity("SourceParser.DataAccessLevel.Entities.Style.Date", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Date");
                });

            modelBuilder.Entity("SourceParser.DataAccessLevel.Entities.Style.DatePart", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("DateId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("DateId");

                    b.ToTable("DatePart");
                });

            modelBuilder.Entity("SourceParser.DataAccessLevel.Entities.Style.DatePartPublisher", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("DatePublisherId")
                        .HasColumnType("TEXT");

                    b.Property<string>("NamePublisher")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("DatePublisherId");

                    b.ToTable("DatePartPublisher");
                });

            modelBuilder.Entity("SourceParser.DataAccessLevel.Entities.Style.DatePartUniver", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("DateUniverId")
                        .HasColumnType("TEXT");

                    b.Property<string>("NameUniver")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("DateUniverId");

                    b.ToTable("DatePartUniver");
                });

            modelBuilder.Entity("SourceParser.DataAccessLevel.Entities.Style.DatePublisher", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("DatePublisher");
                });

            modelBuilder.Entity("SourceParser.DataAccessLevel.Entities.Style.DateUniver", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("DateUniver");
                });

            modelBuilder.Entity("SourceParser.DataAccessLevel.Entities.Style.Group", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Group");
                });

            modelBuilder.Entity("SourceParser.DataAccessLevel.Entities.Style.GroupPublisher", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("GroupPublisher");
                });

            modelBuilder.Entity("SourceParser.DataAccessLevel.Entities.Style.GroupUniver", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("GroupUniver");
                });

            modelBuilder.Entity("SourceParser.DataAccessLevel.Entities.Style.Label", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("Form")
                        .HasColumnType("TEXT");

                    b.Property<string>("Prefix")
                        .HasColumnType("TEXT");

                    b.Property<string>("Suffix")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Label");
                });

            modelBuilder.Entity("SourceParser.DataAccessLevel.Entities.Style.Name", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("Delimiter")
                        .HasColumnType("TEXT");

                    b.Property<string>("InitializeWith")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Name");
                });

            modelBuilder.Entity("SourceParser.DataAccessLevel.Entities.Style.PagesNumber", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("TextId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("TextId");

                    b.ToTable("PagesNumber");
                });

            modelBuilder.Entity("SourceParser.DataAccessLevel.Entities.Style.PagesRange", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("TextId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("TextId");

                    b.ToTable("PagesRange");
                });

            modelBuilder.Entity("SourceParser.DataAccessLevel.Entities.Style.PublishUniver", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("GroupUniverId")
                        .HasColumnType("TEXT");

                    b.Property<string>("YearDateUniverId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("GroupUniverId");

                    b.HasIndex("YearDateUniverId");

                    b.ToTable("PublishUniver");
                });

            modelBuilder.Entity("SourceParser.DataAccessLevel.Entities.Style.PublishVolume", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("TextId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("TextId");

                    b.ToTable("PublishVolume");
                });

            modelBuilder.Entity("SourceParser.DataAccessLevel.Entities.Style.Publisher", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("GroupPublisherId")
                        .HasColumnType("TEXT");

                    b.Property<string>("YearDatePublisherId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("GroupPublisherId");

                    b.HasIndex("YearDatePublisherId");

                    b.ToTable("Publisher");
                });

            modelBuilder.Entity("SourceParser.DataAccessLevel.Entities.Style.Style", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("AuthorFirstId")
                        .HasColumnType("TEXT");

                    b.Property<string>("AuthorSecondId")
                        .HasColumnType("TEXT");

                    b.Property<string>("EtAl")
                        .HasColumnType("TEXT");

                    b.Property<int>("EtAlMax")
                        .HasColumnType("INTEGER");

                    b.Property<string>("PageRangeDelimiter")
                        .HasColumnType("TEXT");

                    b.Property<string>("PagesNumberId")
                        .HasColumnType("TEXT");

                    b.Property<string>("PagesRangeId")
                        .HasColumnType("TEXT");

                    b.Property<string>("PublishVolumeId")
                        .HasColumnType("TEXT");

                    b.Property<string>("PublisherId")
                        .HasColumnType("TEXT");

                    b.Property<string>("PublishuniverId")
                        .HasColumnType("TEXT");

                    b.Property<string>("TitleId")
                        .HasColumnType("TEXT");

                    b.Property<string>("TitleOfConferenceId")
                        .HasColumnType("TEXT");

                    b.Property<string>("WebdocId")
                        .HasColumnType("TEXT");

                    b.Property<string>("YearDateStyleId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("AuthorFirstId");

                    b.HasIndex("AuthorSecondId");

                    b.HasIndex("PagesNumberId");

                    b.HasIndex("PagesRangeId");

                    b.HasIndex("PublishVolumeId");

                    b.HasIndex("PublisherId");

                    b.HasIndex("PublishuniverId");

                    b.HasIndex("TitleId");

                    b.HasIndex("TitleOfConferenceId");

                    b.HasIndex("WebdocId");

                    b.HasIndex("YearDateStyleId");

                    b.ToTable("Styles");
                });

            modelBuilder.Entity("SourceParser.DataAccessLevel.Entities.Style.Text", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("GroupId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Prefix")
                        .HasColumnType("TEXT");

                    b.Property<string>("Suffix")
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("GroupId");

                    b.ToTable("Texts");
                });

            modelBuilder.Entity("SourceParser.DataAccessLevel.Entities.Style.TextPublisher", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("GroupPublisherId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Prefix")
                        .HasColumnType("TEXT");

                    b.Property<string>("Suffix")
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.Property<string>("Variable")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("GroupPublisherId");

                    b.ToTable("TextPublisher");
                });

            modelBuilder.Entity("SourceParser.DataAccessLevel.Entities.Style.TextUniver", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("GroupUniverId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Prefix")
                        .HasColumnType("TEXT");

                    b.Property<string>("Suffix")
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.Property<string>("Variable")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("GroupUniverId");

                    b.ToTable("TextUniver");
                });

            modelBuilder.Entity("SourceParser.DataAccessLevel.Entities.Style.Title", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("TextId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("TextId");

                    b.ToTable("Title");
                });

            modelBuilder.Entity("SourceParser.DataAccessLevel.Entities.Style.TitleOfConference", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("TextId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("TextId");

                    b.ToTable("TitleOfConference");
                });

            modelBuilder.Entity("SourceParser.DataAccessLevel.Entities.Style.Webdoc", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("GroupId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("GroupId");

                    b.ToTable("Webdoc");
                });

            modelBuilder.Entity("SourceParser.DataAccessLevel.Entities.Style.YearDate", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("DateId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("DateId");

                    b.ToTable("YearDate");
                });

            modelBuilder.Entity("SourceParser.DataAccessLevel.Entities.Style.YearDatePublisher", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("DatePublisherId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("DatePublisherId");

                    b.ToTable("YearDatePublisher");
                });

            modelBuilder.Entity("SourceParser.DataAccessLevel.Entities.Style.YearDateUniver", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("DateUniverId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("DateUniverId");

                    b.ToTable("YearDateUniver");
                });

            modelBuilder.Entity("SourceParser.DataAccessLevel.Entities.Translator", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Translator");
                });

            modelBuilder.Entity("SourceParser.DataAccessLevel.Entities.Document", b =>
                {
                    b.HasOne("SourceParser.DataAccessLevel.Entities.Author", "Author")
                        .WithMany()
                        .HasForeignKey("AuthorId");

                    b.HasOne("SourceParser.DataAccessLevel.Entities.Co_Author", "Co_Author")
                        .WithMany()
                        .HasForeignKey("Co_AuthorId");

                    b.HasOne("SourceParser.DataAccessLevel.Entities.Editor", "Editor")
                        .WithMany()
                        .HasForeignKey("EditorId");

                    b.HasOne("SourceParser.DataAccessLevel.Entities.Page", "Pages")
                        .WithMany()
                        .HasForeignKey("PageId");

                    b.HasOne("SourceParser.DataAccessLevel.Entities.Publisher", "Publisher")
                        .WithMany()
                        .HasForeignKey("PublisherId");

                    b.HasOne("SourceParser.DataAccessLevel.Entities.Translator", "Translator")
                        .WithMany()
                        .HasForeignKey("TranslatorId");
                });

            modelBuilder.Entity("SourceParser.DataAccessLevel.Entities.Note", b =>
                {
                    b.HasOne("SourceParser.DataAccessLevel.Entities.Document", "Document")
                        .WithMany()
                        .HasForeignKey("DocumentId");
                });

            modelBuilder.Entity("SourceParser.DataAccessLevel.Entities.Reference", b =>
                {
                    b.HasOne("SourceParser.DataAccessLevel.Entities.Document", "Document")
                        .WithMany()
                        .HasForeignKey("DocumentId");

                    b.HasOne("SourceParser.DataAccessLevel.Entities.Style.Style", "Style")
                        .WithMany()
                        .HasForeignKey("StyleId");
                });

            modelBuilder.Entity("SourceParser.DataAccessLevel.Entities.Style.AuthorFirst", b =>
                {
                    b.HasOne("SourceParser.DataAccessLevel.Entities.Style.Label", "Label")
                        .WithMany()
                        .HasForeignKey("LabelId");

                    b.HasOne("SourceParser.DataAccessLevel.Entities.Style.Name", "Name")
                        .WithMany()
                        .HasForeignKey("NameId");
                });

            modelBuilder.Entity("SourceParser.DataAccessLevel.Entities.Style.AuthorSecond", b =>
                {
                    b.HasOne("SourceParser.DataAccessLevel.Entities.Style.Label", "Label")
                        .WithMany()
                        .HasForeignKey("LabelId");

                    b.HasOne("SourceParser.DataAccessLevel.Entities.Style.Name", "Name")
                        .WithMany()
                        .HasForeignKey("NameId");
                });

            modelBuilder.Entity("SourceParser.DataAccessLevel.Entities.Style.DatePart", b =>
                {
                    b.HasOne("SourceParser.DataAccessLevel.Entities.Style.Date", "Date")
                        .WithMany("DateParts")
                        .HasForeignKey("DateId");
                });

            modelBuilder.Entity("SourceParser.DataAccessLevel.Entities.Style.DatePartPublisher", b =>
                {
                    b.HasOne("SourceParser.DataAccessLevel.Entities.Style.DatePublisher", "DatePublisher")
                        .WithMany("DatePartPublishers")
                        .HasForeignKey("DatePublisherId");
                });

            modelBuilder.Entity("SourceParser.DataAccessLevel.Entities.Style.DatePartUniver", b =>
                {
                    b.HasOne("SourceParser.DataAccessLevel.Entities.Style.DateUniver", "DateUniver")
                        .WithMany("DatePartUnivers")
                        .HasForeignKey("DateUniverId");
                });

            modelBuilder.Entity("SourceParser.DataAccessLevel.Entities.Style.PagesNumber", b =>
                {
                    b.HasOne("SourceParser.DataAccessLevel.Entities.Style.Text", "Text")
                        .WithMany()
                        .HasForeignKey("TextId");
                });

            modelBuilder.Entity("SourceParser.DataAccessLevel.Entities.Style.PagesRange", b =>
                {
                    b.HasOne("SourceParser.DataAccessLevel.Entities.Style.Text", "Text")
                        .WithMany()
                        .HasForeignKey("TextId");
                });

            modelBuilder.Entity("SourceParser.DataAccessLevel.Entities.Style.PublishUniver", b =>
                {
                    b.HasOne("SourceParser.DataAccessLevel.Entities.Style.GroupUniver", "GroupUniver")
                        .WithMany("PublishUnivers")
                        .HasForeignKey("GroupUniverId");

                    b.HasOne("SourceParser.DataAccessLevel.Entities.Style.YearDateUniver", "YearDateUniver")
                        .WithMany()
                        .HasForeignKey("YearDateUniverId");
                });

            modelBuilder.Entity("SourceParser.DataAccessLevel.Entities.Style.PublishVolume", b =>
                {
                    b.HasOne("SourceParser.DataAccessLevel.Entities.Style.Text", "Text")
                        .WithMany()
                        .HasForeignKey("TextId");
                });

            modelBuilder.Entity("SourceParser.DataAccessLevel.Entities.Style.Publisher", b =>
                {
                    b.HasOne("SourceParser.DataAccessLevel.Entities.Style.GroupPublisher", "GroupPublisher")
                        .WithMany("Publishers")
                        .HasForeignKey("GroupPublisherId");

                    b.HasOne("SourceParser.DataAccessLevel.Entities.Style.YearDatePublisher", "YearDatePublisher")
                        .WithMany()
                        .HasForeignKey("YearDatePublisherId");
                });

            modelBuilder.Entity("SourceParser.DataAccessLevel.Entities.Style.Style", b =>
                {
                    b.HasOne("SourceParser.DataAccessLevel.Entities.Style.AuthorFirst", "AuthorFirst")
                        .WithMany()
                        .HasForeignKey("AuthorFirstId");

                    b.HasOne("SourceParser.DataAccessLevel.Entities.Style.AuthorSecond", "AuthorSecond")
                        .WithMany()
                        .HasForeignKey("AuthorSecondId");

                    b.HasOne("SourceParser.DataAccessLevel.Entities.Style.PagesNumber", "PagesNumber")
                        .WithMany()
                        .HasForeignKey("PagesNumberId");

                    b.HasOne("SourceParser.DataAccessLevel.Entities.Style.PagesRange", "PagesRange")
                        .WithMany()
                        .HasForeignKey("PagesRangeId");

                    b.HasOne("SourceParser.DataAccessLevel.Entities.Style.PublishVolume", "PublishVolume")
                        .WithMany()
                        .HasForeignKey("PublishVolumeId");

                    b.HasOne("SourceParser.DataAccessLevel.Entities.Style.Publisher", "Publisher")
                        .WithMany()
                        .HasForeignKey("PublisherId");

                    b.HasOne("SourceParser.DataAccessLevel.Entities.Style.PublishUniver", "Publishuniver")
                        .WithMany()
                        .HasForeignKey("PublishuniverId");

                    b.HasOne("SourceParser.DataAccessLevel.Entities.Style.Title", "Title")
                        .WithMany()
                        .HasForeignKey("TitleId");

                    b.HasOne("SourceParser.DataAccessLevel.Entities.Style.TitleOfConference", "TitleOfConference")
                        .WithMany()
                        .HasForeignKey("TitleOfConferenceId");

                    b.HasOne("SourceParser.DataAccessLevel.Entities.Style.Webdoc", "Webdoc")
                        .WithMany()
                        .HasForeignKey("WebdocId");

                    b.HasOne("SourceParser.DataAccessLevel.Entities.Style.YearDate", "YearDateStyle")
                        .WithMany()
                        .HasForeignKey("YearDateStyleId");
                });

            modelBuilder.Entity("SourceParser.DataAccessLevel.Entities.Style.Text", b =>
                {
                    b.HasOne("SourceParser.DataAccessLevel.Entities.Style.Group", "Group")
                        .WithMany("Texts")
                        .HasForeignKey("GroupId");
                });

            modelBuilder.Entity("SourceParser.DataAccessLevel.Entities.Style.TextPublisher", b =>
                {
                    b.HasOne("SourceParser.DataAccessLevel.Entities.Style.GroupPublisher", "GroupPublisher")
                        .WithMany("TextPublishers")
                        .HasForeignKey("GroupPublisherId");
                });

            modelBuilder.Entity("SourceParser.DataAccessLevel.Entities.Style.TextUniver", b =>
                {
                    b.HasOne("SourceParser.DataAccessLevel.Entities.Style.GroupUniver", "GroupUniver")
                        .WithMany("TextUnivers")
                        .HasForeignKey("GroupUniverId");
                });

            modelBuilder.Entity("SourceParser.DataAccessLevel.Entities.Style.Title", b =>
                {
                    b.HasOne("SourceParser.DataAccessLevel.Entities.Style.Text", "Text")
                        .WithMany()
                        .HasForeignKey("TextId");
                });

            modelBuilder.Entity("SourceParser.DataAccessLevel.Entities.Style.TitleOfConference", b =>
                {
                    b.HasOne("SourceParser.DataAccessLevel.Entities.Style.Text", "Text")
                        .WithMany()
                        .HasForeignKey("TextId");
                });

            modelBuilder.Entity("SourceParser.DataAccessLevel.Entities.Style.Webdoc", b =>
                {
                    b.HasOne("SourceParser.DataAccessLevel.Entities.Style.Group", "Group")
                        .WithMany("Webdocs")
                        .HasForeignKey("GroupId");
                });

            modelBuilder.Entity("SourceParser.DataAccessLevel.Entities.Style.YearDate", b =>
                {
                    b.HasOne("SourceParser.DataAccessLevel.Entities.Style.Date", "Date")
                        .WithMany("YearDates")
                        .HasForeignKey("DateId");
                });

            modelBuilder.Entity("SourceParser.DataAccessLevel.Entities.Style.YearDatePublisher", b =>
                {
                    b.HasOne("SourceParser.DataAccessLevel.Entities.Style.DatePublisher", "DatePublisher")
                        .WithMany("YearDatePublishers")
                        .HasForeignKey("DatePublisherId");
                });

            modelBuilder.Entity("SourceParser.DataAccessLevel.Entities.Style.YearDateUniver", b =>
                {
                    b.HasOne("SourceParser.DataAccessLevel.Entities.Style.DateUniver", "DateUniver")
                        .WithMany("YearDateUnivers")
                        .HasForeignKey("DateUniverId");
                });
#pragma warning restore 612, 618
        }
    }
}
